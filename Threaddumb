pipeline {
    agent any
    parameters {
        string(name: 'USERNAME', defaultValue: 'user', description: 'Enter the username for SSH login')
        string(name: 'SERVER_IP', defaultValue: '', description: 'Enter the server IP address or hostname')
        string(name: 'JAVA_PID', defaultValue: '', description: 'Enter the PID of the Java application')
        string(name: 'THREAD_DUMP_PATH', defaultValue: '/tmp/thread_dumps', description: 'Enter the path to store thread dumps')
        string(name: 'INTERVAL', defaultValue: '10', description: 'Interval in seconds between thread dumps')
        string(name: 'DUMP_COUNT', defaultValue: '12', description: 'Number of thread dumps to collect')
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    // Validate parameters
                    if (params.SERVER_IP.trim() == '' || params.JAVA_PID.trim() == '') {
                        error "SERVER_IP and JAVA_PID parameters are required!"
                    }
                }
                echo """
                === THREAD DUMP COLLECTION SETUP ===
                - Server: ${params.SERVER_IP}
                - Username: ${params.USERNAME}
                - Java Process ID: ${params.JAVA_PID}
                - Output Path on Server: ${params.THREAD_DUMP_PATH}
                - Interval Between Dumps: ${params.INTERVAL} seconds
                - Number of Dumps to Collect: ${params.DUMP_COUNT}
                ====================================
                """
            }
        }
        stage('Collect Thread Dumps') {
            steps {
                script {
                    echo "Starting SSH connection to ${params.SERVER_IP} to collect thread dumps."
                    // SSH and execute commands on the remote server
                    sh """
                    ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${params.USERNAME}@${params.SERVER_IP} bash -s << 'EOF'
                        echo "Connected to server: \$(hostname)"
                        
                        # Create directory for thread dumps
                        echo "Creating directory ${params.THREAD_DUMP_PATH} to store thread dumps..."
                        mkdir -p ${params.THREAD_DUMP_PATH}

                        # Collect thread dumps in a loop
                        echo "Starting thread dump collection process..."
                        for i in {1..${params.DUMP_COUNT}}; do
                            TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
                            jstack -l ${params.JAVA_PID} > ${params.THREAD_DUMP_PATH}/thread_dump_\${i}_\${TIMESTAMP}.txt
                            echo "Thread dump \${i} collected and stored at ${params.THREAD_DUMP_PATH}/thread_dump_\${i}_\${TIMESTAMP}.txt"
                            sleep ${params.INTERVAL}
                        done

                        echo "Thread dump collection process completed on server."
                    EOF
                    """
                }
            }
        }
    }
    post {
        success {
            echo "Thread dump collection completed successfully. Copying files from the server to Jenkins workspace."
            // Copy thread dumps from remote server to Jenkins workspace
            sh """
            echo "Copying thread dumps from ${params.SERVER_IP}:${params.THREAD_DUMP_PATH} to Jenkins workspace..."
            scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${params.USERNAME}@${params.SERVER_IP}:${params.THREAD_DUMP_PATH}/*.txt .
            """
            archiveArtifacts artifacts: '*.txt', fingerprint: true
            echo "Thread dumps archived in Jenkins successfully."
        }
        failure {
            echo "Thread dump collection process failed. Please check the logs for details."
        }
    }
}
