IN this code we learn how selection sort is work 


Example

Sample Input

5

7 

-2 

4 

1 

3
Sample Output

Comparing -2 and 7

Comparing 4 and -2

Comparing 1 and -2

Comparing 3 and -2

Swapping 7 and -2

Comparing 4 and 7

Comparing 1 and 4

Comparing 3 and 1

Swapping 7 and 1

Comparing 7 and 4

Comparing 3 and 4

Swapping 4 and 3

Comparing 4 and 7

Swapping 7 and 4

-2
1
3
4
7

import java.io.*;
import java.util.*;

public class Main {

  public static void selectionSort(int[] arr) {
    
    for(int i=0; i<arr.length-1; i++)
    {
       int m= i;
      for(int j=i+1; j<arr.length; j++)// j=i+1 because it will start with the next number
      {
        if(isSmaller(arr,j,m))
        {
          m = j;

        }
       }
          swap(arr,i,m);
    }
  }

  // used for swapping ith and jth elements of array
  public static void swap(int[] arr, int i, int j) {
    System.out.println("Swapping " + arr[i] + " and " + arr[j]);
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }

  // return true if ith element is smaller than jth element
  public static boolean isSmaller(int[] arr, int i, int j) {
    System.out.println("Comparing " + arr[i] + " and " + arr[j]);
    if (arr[i] < arr[j]) {
      return true;
    } else {
      return false;
    }
  }

  public static void print(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
      System.out.println(arr[i]);
    }
  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = scn.nextInt();
    }
    selectionSort(arr);
    print(arr);
  }

}

Analysis

Time Complexity : Worst Case Time Complexity: O(n*n). Worst case is when the array is in reverse order. 

Best Case Time Complexity: O(n). Best case is when the input array is already sorted. Average Case Time Complexity: O(n*n)
The inner loop does O(n) work on each iteration, and the outer loop runs for O(n) iterations, so the total work is O(n 2).
SPACE COMPLEXITY : Auxiliary Space: O(1), as no extra space is used. 
