In this algorithm we saw how be compare the value in reverese order this is also know as reverse bubble 
Example

Sample Input

5

7 

-2 

4 

1 

3
Sample Output

Comparing -2 and 7

Swapping 7 and -2

Comparing 4 and 7

Swapping 7 and 4

Comparing 4 and -2

Comparing 1 and 7

Swapping 7 and 1

Comparing 1 and 4

Swapping 4 and 1

Comparing 1 and -2

Comparing 3 and 7

Swapping 7 and 3

Comparing 3 and 4

Swapping 4 and 3

Comparing 3 and 1

-2

1

3

4

7

import java.io.*;
import java.util.*;

public class Main {

  public static void insertionSort(int[] arr) {
   
    for(int i=1; i<arr.length; i++)
    {
      
      for(int j=i-1; j>=0; j--) // reverse bubble sort loop u can understand it more clearly using debug
      {
        
        if(isGreater(arr,j,j+1))
        {
          swap(arr,j,j+1);
        }
        else{
          break;
        }

      }
     
    }
    
  }

  // used for swapping ith and jth elements of array
  public static void swap(int[] arr, int i, int j) {
    System.out.println("Swapping " + arr[i] + " and " + arr[j]);
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }

  // return true if jth element is greater than ith element
  public static boolean isGreater(int[] arr, int j, int i) {
    System.out.println("Comparing " + arr[i] + " and " + arr[j]);
    if (arr[i] < arr[j]) {
      return true;
    } else {
      return false;
    }
  }

  public static void print(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
      System.out.println(arr[i]);
    }
  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = scn.nextInt();
    }
    insertionSort(arr);
    print(arr);
  }

}
Time Complexity :

O(n^2) We're only running two loops. What do you believe the worst case scenario for Insertion sort will be? Yes, if all of the numbers are arranged backwards (in descending order). Then we'll have to do 1+ 2 + 3 +... swaps for each iteration of n-1. So, 
this is an Arithmetic Progression with the outcome n*(n+1)/2 = n^2. Worst-case scenario: O (n^2). Best Case: O(n) [This was already explored]

Space Complexity :

O(1) Because the only core operation is a swap, we're working with constant auxiliary space. 
Hopefully, you have grasped the concept of this Algorithm. If you haven't already, I recommend watching 
the entire video and running the code by hand. That way, you'll be able to grasp the logic behind this lovely 
sorting method. Best wishes and keep learning!! 
