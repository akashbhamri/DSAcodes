Example
Sample Input

5
3
1
0
7
5

Sample Output
5
7
0
1
3
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n= sc.nextInt();
        int[] a = new int[n];
        for(int i=0; i<a.length; i++)
        {
            a[i] = sc.nextInt();
        }
        displayArrReverse(a,n);
    }

    public static void displayArrReverse(int[] arr, int idx) {
        if(idx==0)
        {
            return;
        }
        System.out.println(arr[idx-1]);
        displayArrReverse(arr,idx-1);

     }

}

 Analysis
Time Complexity :

O(n) Let's try to understand our time complexity. It will be similar to the previous problem. Since we are making at most n recursion calls
and in each call we are performing O(1) operations (printing a data is constant time) so our overall time complexity is n*O(1) = O(n).


SPACE COMPLEXITY :

O(n) Also, we know for each recursion call the parameters, address of the array are stored in the runtime stack, and since the 
recursive call stack is of n length it will also take n space in the stack. Although we are not using any array the space complexity will still be O(n).
