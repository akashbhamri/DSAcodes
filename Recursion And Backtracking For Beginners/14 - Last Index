Example
Sample Input

6
15
11
40
4
4
9
4

Sample Output
4

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for(int i=0; i<a.length; i++)
        {
            a[i] = sc.nextInt();
        }
        int search = sc.nextInt();
     System.out.println(lastIndex(a,0,search));

    }

    public static int lastIndex(int[] arr, int idx, int x){
        
        if(idx==arr.length)
        {
            return -1;
        }
       int lll = lastIndex(arr,idx+1,x);
       if(lll==-1)
       {
           if(arr[idx]==x)
           {
               return idx;
           }
           else{
               return -1;
           }
       }
       else{
           return lll;
       }
    }

}
 Analysis
Time Complexity :

O(n) As n (array"s length) calls are made and work is done corresponding to these n calls therefore the time complexity becomes O(n).


SPACE COMPLEXITY :

O(1) Since no extra space is used, therefore space complexity is constant, however you should know that 
if the recursion call stack is taken into account, then space complexity will be O(n) as there are n recursive calls.
