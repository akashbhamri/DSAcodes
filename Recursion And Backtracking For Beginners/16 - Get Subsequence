Example
Sample Input

abc

Sample Output
[, c, b, bc, a, ac, ab, abc]

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
       System.out.println(gss(s));
      


    }

    public static ArrayList<String> gss(String str) {
        if(str.length()==0)
        {
            ArrayList<String> aa = new ArrayList<>();
            aa.add("");
            return aa;
        }

        char ch = str.charAt(0);
        String s = str.substring(1);
        ArrayList<String> abb = gss(s);
        ArrayList<String> acc = new ArrayList<>();
        for(String ac : abb)
        {
            acc.add(""+ac);
        }
        for(String ac : abb)
        {
            acc.add(ch+ac);
        }
        return acc;
        
    
    }

}
Time Complexity :

O(n) This time complexity is linear because a recursion call is made along with using "for loop".


SPACE COMPLEXITY :

O(1) As no extra space is required, therefore space complexity is constant. However, if we include the space used in the recursive stack then the space complexity is O(n).
