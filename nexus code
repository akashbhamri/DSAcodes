#!/bin/bash

# Nexus Repository Manager details
NEXUS_URL="https://nexus.app.syfbank.com:8443"
CREDENTIALS="username:password"
BLOB_STORE="$2"  # Blob store provided as a parameter to the script

# Function to decode base64 and parse JSON
decode_base64() {
  echo $1 | base64 --decode | jq .
}

# Function to get the size of a component and convert to human-readable format
convert_size() {
  BYTES=$1
  if [ $BYTES -ge $((1024 * 1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024 / 1024" | bc)
    echo "${SIZE} GB"
  elif [ $BYTES -ge $((1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024" | bc)
    echo "${SIZE} MB"
  elif [ $BYTES -ge 1024 ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024" | bc)
    echo "${SIZE} KB"
  else
    echo "${BYTES} bytes"
  fi
}

# Function to delete a component
delete_component() {
  local COMPONENT_URL="$1"
  local REPOSITORY_NAME="$2"
  local COMPONENT_NAME="$3"
  local COMPONENT_VERSION="$4"
  local PARENT_STRUCTURE="$5"
  local LAST_MODIFIED="$6"
  local SIZE="$7"
  local LAST_DOWNLOADED="$8"
  local OUTPUT_FILE="$9"

  response=$(curl -u "$CREDENTIALS" -X DELETE "$COMPONENT_URL" -w "\nHTTP_STATUS:%{http_code}" -s)
  http_status=$(echo "$response" | grep "HTTP_STATUS" | awk -F: '{print $2}')
  
  if [ "$http_status" -eq 204 ]; then
    echo "Successfully deleted $COMPONENT_NAME version $COMPONENT_VERSION from $REPOSITORY_NAME."
    echo "$REPOSITORY_NAME,$COMPONENT_NAME,$COMPONENT_VERSION,$PARENT_STRUCTURE,$LAST_MODIFIED,$SIZE,$LAST_DOWNLOADED,DELETED" >> "$OUTPUT_FILE"
  else
    echo "Failed to delete $COMPONENT_NAME version $COMPONENT_VERSION from $REPOSITORY_NAME. Status code: $http_status"
    echo "$REPOSITORY_NAME,$COMPONENT_NAME,$COMPONENT_VERSION,$PARENT_STRUCTURE,$LAST_MODIFIED,$SIZE,$LAST_DOWNLOADED,FAILED" >> "$OUTPUT_FILE"
  fi
}

# Function to list and delete components in the specified repository
list_and_delete_components() {
  local REPOSITORY_NAME="$1"
  local COMPONENT_NAMES=($(echo "$2" | tr ',' ' '))
  local COMPONENT_VERSIONS=($(echo "$3" | tr ',' ' '))
  local PARENT_STRUCTURES=($(echo "$4" | tr ',' ' '))
  local LAST_MODIFIED_DATES=($(echo "$5" | tr ',' ' '))
  local SIZES=($(echo "$6" | tr ',' ' '))
  local LAST_DOWNLOADED_DATES=($(echo "$7" | tr ',' ' '))
  local OUTPUT_FILE="$8"

  echo "Repository Name,Component Name,Version,Parent Structure,Last Modified,Size,Last Downloaded,Deletion Status" > "$OUTPUT_FILE"

  local continuation_token=""
  while : ; do
    if [ -z "$continuation_token" ]; then
      URL="$NEXUS_URL/service/rest/v1/components?repository=$REPOSITORY_NAME"
    else
      URL="$NEXUS_URL/service/rest/v1/components?repository=$REPOSITORY_NAME&continuationToken=$continuation_token"
    fi
    
    echo "Fetching URL: $URL"  # Debug statement
    
    response=$(curl -u "$CREDENTIALS" -X GET "$URL" -w "\nHTTP_STATUS:%{http_code}" -s)
    echo "Response: $response"  # Debug statement
    http_status=$(echo "$response" | grep "HTTP_STATUS" | awk -F: '{print $2}')
    
    if [ "$http_status" -eq 200 ]; then
      continuation_token=$(echo "$response" | grep -v "HTTP_STATUS" | jq -r '.continuationToken')
      COMPONENTS=$(echo "$response" | grep -v "HTTP_STATUS" | jq -r '.items[] | @base64')

      for COMPONENT in $COMPONENTS; do
        DECODED_COMPONENT=$(decode_base64 "$COMPONENT")
        echo "Decoded Component: $DECODED_COMPONENT"  # Debug statement

        COMPONENT_NAME=$(echo "$DECODED_COMPONENT" | jq -r '.name // empty')
        COMPONENT_VERSION=$(echo "$DECODED_COMPONENT" | jq -r '.version // empty')
        LAST_MODIFIED=$(echo "$DECODED_COMPONENT" | jq -r '.lastModified // empty')

        # Initialize variables for aggregation
        MAX_LAST_MODIFIED=""
        MAX_LAST_DOWNLOADED=""
        UPLOADER=""
        COMPONENT_SIZE=0
        PARENT_STRUCTURE=""

        # Extract assets and iterate over them
        ASSETS=$(echo "$DECODED_COMPONENT" | jq -r '.assets[] | @base64')
        for ASSET in $ASSETS; do
          DECODED_ASSET=$(decode_base64 "$ASSET")
          
          ASSET_SIZE=$(echo "$DECODED_ASSET" | jq -r '.size // 0')
          COMPONENT_SIZE=$((COMPONENT_SIZE + ASSET_SIZE))
          
          ASSET_LAST_MODIFIED=$(echo "$DECODED_ASSET" | jq -r '.lastModified // empty')
          ASSET_LAST_DOWNLOADED=$(echo "$DECODED_ASSET" | jq -r '.lastDownloaded // empty')
          ASSET_UPLOADER=$(echo "$DECODED_ASSET" | jq -r '.uploader // empty')
          ASSET_PATH=$(echo "$DECODED_ASSET" | jq -r '.path // empty')
          
          # Aggregate data
          if [[ -z "$MAX_LAST_MODIFIED" || "$ASSET_LAST_MODIFIED" > "$MAX_LAST_MODIFIED" ]]; then
            MAX_LAST_MODIFIED=$ASSET_LAST_MODIFIED
          fi
          if [[ -z "$MAX_LAST_DOWNLOADED" || "$ASSET_LAST_DOWNLOADED" > "$MAX_LAST_DOWNLOADED" ]]; then
            MAX_LAST_DOWNLOADED=$ASSET_LAST_DOWNLOADED
          fi
          if [[ -z "$UPLOADER" ]]; then
            UPLOADER=$ASSET_UPLOADER
          fi
          if [[ -z "$PARENT_STRUCTURE" ]]; then
            PARENT_STRUCTURE=$(dirname "$ASSET_PATH")
          fi
        done

        HUMAN_READABLE_SIZE=$(convert_size "$COMPONENT_SIZE")

        for i in "${!COMPONENT_NAMES[@]}"; do
          # Check all the provided conditions
          if [[ "$COMPONENT_NAME" == "${COMPONENT_NAMES[$i]}" ]] && \
             [[ "$COMPONENT_VERSION" == "${COMPONENT_VERSIONS[$i]}" ]] && \
             [[ -z "${PARENT_STRUCTURES[$i]}" || "$PARENT_STRUCTURE" == "${PARENT_STRUCTURES[$i]}" ]] && \
             [[ -z "${LAST_MODIFIED_DATES[$i]}" || "$MAX_LAST_MODIFIED" == "${LAST_MODIFIED_DATES[$i]}" ]] && \
             [[ -z "${SIZES[$i]}" || "$HUMAN_READABLE_SIZE" == "${SIZES[$i]}" ]] && \
             [[ -z "${LAST_DOWNLOADED_DATES[$i]}" || "$MAX_LAST_DOWNLOADED" == "${LAST_DOWNLOADED_DATES[$i]}" ]]; then

            COMPONENT_URL=$(echo "$DECODED_COMPONENT" | jq -r '.assets[0].downloadUrl' | sed "s|/repository/|/repository/$REPOSITORY_NAME/|g" | sed 's|/download/|/component/|g')

            delete_component "$COMPONENT_URL" "$REPOSITORY_NAME" "$COMPONENT_NAME" "$COMPONENT_VERSION" "$PARENT_STRUCTURE" "$MAX_LAST_MODIFIED" "$HUMAN_READABLE_SIZE" "$MAX_LAST_DOWNLOADED" "$OUTPUT_FILE"
          fi
        done
      done

      if [ -z "$continuation_token" ]; then
        break
      fi
    else
      echo "API call failed with status code: $http_status. Check your Nexus URL, credentials, and repository name."
      break
    fi
  done
}

# Main script execution
REPOSITORY_NAME="$1"
COMPONENT_NAME_FILTER="$2"
COMPONENT_VERSION_FILTER="$3"
PARENT_STRUCTURE_FILTER="$4"
LAST_MODIFIED_FILTER="$5"
SIZE_FILTER="$6"
LAST_DOWNLOADED_FILTER="$7"
OUTPUT_FILE="$WORKSPACE/nexus_deleted_components_$(date +%Y%m%d_%H%M%S).csv"

list_and_delete_components "$REPOSITORY_NAME" "$COMPONENT_NAME_FILTER" "$COMPONENT_VERSION_FILTER" "$PARENT_STRUCTURE_FILTER" "$LAST_MODIFIED_FILTER" "$SIZE_FILTER" "$LAST_DOWNLOADED_FILTER" "$OUTPUT_FILE"

echo "Reports saved in $OUTPUT_FILE."
