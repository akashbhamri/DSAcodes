#!/bin/bash

########################################
####### Karishma Farhin Shaik ##########
########################################

# Bitbucket Server URL and credentials
BASE_URL='BASE_URL'
USERNAME='$USER'
PASSWORD='$PASS'
# OUTPUT_FILE='Repo_licensed_users.csv'
GROUP_NAME='stash-users'
STASH_USERS_FILE='stash_users.csv'
UNLICENSED_LOG='unlicensed_users.txt'
# Initialize pagination variables
limit=1000

# Create or clear the output file and write CSV header
echo "Project Key,Repository,Username,Email,Permission,Last Authentication Date" >"$OUTPUT_FILE"

# Function to fetch users in the stash-users group
fetch_stash_users() {
    start=0
    has_more=true

    while $has_more; do
        response=$(curl -s -u "$USERNAME:$PASSWORD" "$BASE_URL/admin/groups/more-members?context=$GROUP_NAME&limit=$limit&start=$start")
        echo "$response" | jq -r '.values[] | select(.lastAuthenticationTimestamp) | [.name], [.emailAddress], [.lastAuthenticationTimestamp] | @csv' |
        while IFS=, read -r username email timestamp; do
            # Convert timestamp
            human_read=$(date -d @$((timestamp / 1000)) +'%Y-%m-%d')
            echo "$username,$email,$human_read" >> "$STASH_USERS_FILE"
        done

        is_last_page=$(echo "$response" | jq -r '.isLastPage')
        has_more=$([ "$is_last_page" = "false" ] && echo false || echo true)
        start=$((start + limit))
    done
}

fetch_project_admins() {
    # 1. Fetch Project Admins
    fetch_project_admins $project_key
}

fetch_project_users() {
    # 2. Fetch Project Users
    echo "project user details"
    project_users_file="BB_${project_key}_Project_Users.csv"
    echo "Project Key, User Name, Display Name, Permission" > "$project_users_file"
    fetch_project_users $project_key
}

fetch_project_groups() {
    # 3. Fetch Project Groups
    echo "project groups method calling"
    fetch_project_groups $project_key
}

fetch_project_groups_users() {
    # 4. Fetch Project Group users
    fetch_project_groups_users $project_key
}

project_groups_users_sort() {
    # 6. Sorting Group users in final sheet
    project_groups_users_file="BB_${project_key}_Project_Groups_Users.csv"
    echo "Project Key, Group Name, Permission, UserName, DisplayName" > "$project_groups_users_file"
    project_groups_users_sort
}

create_project_csv() {
    # 7. Create the csv file for the project
    project_file="${project_key}_Repo_users.csv"
    echo "Project Key,Repository Name,Username,Email,Permission,Last Authentication Date" > "$project_file"
}

fetch_repositories() {
    # 8. Fetch repositories in the project
    repo_slugs=$(fetch_repos $project_key)
}

fetch_repo_users() {
    # Iterate through each repository
    for repo_slug in $repo_slugs; do
        repo_user_details=$(fetch_repo_users $project_key $repo_slug)
        fetch_repo_admins $project_key $repo_slug
        process_user_details
    done
}

process_user_details() {
    # Process each user detail
    echo "$repo_user_details" | while IFS=, read -r project_key repo_slug username emailAddress permission; do
        if grep -q "^$username," "$STASH_USERS_FILE"; then
            readable_date=$(grep "$username," "$STASH_USERS_FILE" | cut -d , -f3)
            echo "$project_key,$repo_slug,$username,$emailAddress,$permission,$readable_date" >> "$project_file"
        else
            echo "$project_key,$repo_slug,$username,$emailAddress,$permission" >> "$project_file"
        fi
    done
}
