#!/bin/bash

# Nexus Repository Manager details
NEXUS_URL="https://nexus.app.syfbank.com:8443"
CREDENTIALS="username:password"
BLOB_STORE="$2"  # Blob store provided as a parameter to the script

# Function to decode base64 and parse JSON
decode_base64() {
  echo $1 | base64 --decode | jq .
}

# Function to get the size of a component and convert to human-readable format
convert_size() {
  BYTES=$1
  if [ $BYTES -ge $((1024 * 1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024 / 1024" | bc)
    echo "${SIZE} GB"
  elif [ $BYTES -ge $((1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024" | bc)
    echo "${SIZE} MB"
  elif [ $BYTES -ge 1024 ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024" | bc)
    echo "${SIZE} KB"
  else
    echo "${BYTES} bytes"
  fi
}

# Function to list and display components in the specified repository
list_components() {
  local REPOSITORY_NAME=$1
  local OUTPUT_FILE="$WORKSPACE/nexus_components_${REPOSITORY_NAME}_$(date +%Y%m%d_%H%M%S).csv"
  echo "Repository Name,Blob Store Name,Uploader Name,Parent Structure,Last Modified,Size,Last Downloaded" > $OUTPUT_FILE

  local continuation_token=""
  while : ; do
    if [ -z "$continuation_token" ]; then
      URL="$NEXUS_URL/service/rest/v1/components?repository=$REPOSITORY_NAME"
    else
      URL="$NEXUS_URL/service/rest/v1/components?repository=$REPOSITORY_NAME&continuationToken=$continuation_token"
    fi
    
    echo "Fetching URL: $URL"  # Debug statement
    
    response=$(curl -u $CREDENTIALS -X GET "$URL" -w "\nHTTP_STATUS:%{http_code}" -s)
    echo "Response: $response"  # Debug statement
    http_status=$(echo "$response" | grep "HTTP_STATUS" | awk -F: '{print $2}')
    
    if [ "$http_status" -eq 200 ]; then
      continuation_token=$(echo "$response" | grep -v "HTTP_STATUS" | jq -r '.continuationToken')
      COMPONENTS=$(echo "$response" | grep -v "HTTP_STATUS" | jq -r '.items[] | @base64')

      for COMPONENT in $COMPONENTS; do
        DECODED_COMPONENT=$(decode_base64 $COMPONENT)
        echo "Decoded Component: $DECODED_COMPONENT"  # Debug statement

        LAST_MODIFIED=$(echo $DECODED_COMPONENT | jq -r '.lastModified // empty')
        COMPONENT_NAME=$(echo $DECODED_COMPONENT | jq -r '.name // empty')
        COMPONENT_VERSION=$(echo $DECODED_COMPONENT | jq -r '.version // empty')
        
        # Initialize variables for aggregation
        MAX_LAST_MODIFIED=""
        MAX_LAST_DOWNLOADED=""
        UPLOADER=""
        COMPONENT_SIZE=0
        PARENT_STRUCTURE=""

        # Extract assets and iterate over them
        ASSETS=$(echo $DECODED_COMPONENT | jq -r '.assets[] | @base64')
        for ASSET in $ASSETS; do
          DECODED_ASSET=$(decode_base64 $ASSET)
          
          ASSET_SIZE=$(echo $DECODED_ASSET | jq -r '.size // 0')
          COMPONENT_SIZE=$((COMPONENT_SIZE + ASSET_SIZE))
          
          ASSET_LAST_MODIFIED=$(echo $DECODED_ASSET | jq -r '.lastModified // empty')
          ASSET_LAST_DOWNLOADED=$(echo $DECODED_ASSET | jq -r '.lastDownloaded // empty')
          ASSET_UPLOADER=$(echo $DECODED_ASSET | jq -r '.uploader // empty')
          ASSET_PATH=$(echo $DECODED_ASSET | jq -r '.path // empty')
          
          # Aggregate data
          if [[ -z "$MAX_LAST_MODIFIED" || "$ASSET_LAST_MODIFIED" > "$MAX_LAST_MODIFIED" ]]; then
            MAX_LAST_MODIFIED=$ASSET_LAST_MODIFIED
          fi
          if [[ -z "$MAX_LAST_DOWNLOADED" || "$ASSET_LAST_DOWNLOADED" > "$MAX_LAST_DOWNLOADED" ]]; then
            MAX_LAST_DOWNLOADED=$ASSET_LAST_DOWNLOADED
          fi
          if [[ -z "$UPLOADER" ]]; then
            UPLOADER=$ASSET_UPLOADER
          fi
          if [[ -z "$PARENT_STRUCTURE" ]]; then
            PARENT_STRUCTURE=$(dirname "$ASSET_PATH")
          fi
        done

        HUMAN_READABLE_SIZE=$(convert_size $COMPONENT_SIZE)

        echo "Repository: $REPOSITORY_NAME, Blob Store: $BLOB_STORE, Uploader: $UPLOADER, Last Downloaded: $MAX_LAST_DOWNLOADED"  # Debug statement

        # Write component details to CSV file
        printf "%s,%s,%s,%s,%s,%s,%s\n" "$REPOSITORY_NAME" "$BLOB_STORE" "$UPLOADER" "$PARENT_STRUCTURE" "$MAX_LAST_MODIFIED" "$HUMAN_READABLE_SIZE" "$MAX_LAST_DOWNLOADED" >> $OUTPUT_FILE
      done

      if [ -z "$continuation_token" ]; then
        break
      fi
    else
      echo "API call failed with status code: $http_status. Check your Nexus URL, credentials, and repository name."
      break
    fi
  done
}

# Read repository list from parameter
IFS=',' read -ra REPOSITORIES <<< "$REPOSITORY_NAME"
for REPO in "${REPOSITORIES[@]}"; do
  list_components $REPO
done

echo "Reports saved in the workspace."
