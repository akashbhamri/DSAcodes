#!/bin/bash

# UrbanCode Deploy (uDeploy) details
UDEPLOY_URL="https://udeploy.example.com"
UDEPLOY_USER="username"
UDEPLOY_PASSWORD="password"
COMPONENT_NAMES="$1"  # Comma-separated list of components provided as a parameter to the script
OUTPUT_DIR="/path/to/save/csv"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

# Function to decode base64 and parse JSON
decode_base64() {
  echo $1 | base64 --decode | jq .
}

# Function to get the size of a component and convert to human-readable format
convert_size() {
  BYTES=$1
  if [ $BYTES -ge $((1024 * 1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024 / 1024" | bc)
    echo "${SIZE} GB"
  elif [ $BYTES -ge $((1024 * 1024)) ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024 / 1024" | bc)
    echo "${SIZE} MB"
  elif [ $BYTES -ge 1024 ]; then
    SIZE=$(echo "scale=2; $BYTES / 1024" | bc)
    echo "${SIZE} KB"
  else
    echo "${BYTES} bytes"
  fi
}

# Function to list and display component details
list_component_details() {
  local COMPONENT_NAME=$1
  local OUTPUT_FILE="$OUTPUT_DIR/udeploy_components_${COMPONENT_NAME}_$(date +%Y%m%d_%H%M%S).csv"
  echo "Component Name,Version,Size,Created,Created By,Teams,Last Modified" > $OUTPUT_FILE

  local COMPONENT_ID=$(curl -u $UDEPLOY_USER:$UDEPLOY_PASSWORD -X GET "$UDEPLOY_URL/rest/deploy/component?name=$COMPONENT_NAME" | jq -r '.[0].id')
  
  if [ -z "$COMPONENT_ID" ]; then
    echo "Component $COMPONENT_NAME not found."
    return
  fi

  local VERSIONS_URL="$UDEPLOY_URL/rest/deploy/component/$COMPONENT_ID/versions"

  response=$(curl -u $UDEPLOY_USER:$UDEPLOY_PASSWORD -X GET "$VERSIONS_URL" -w "\nHTTP_STATUS:%{http_code}" -s)
  http_status=$(echo "$response" | grep "HTTP_STATUS" | awk -F: '{print $2}')

  if [ "$http_status" -eq 200 ]; then
    VERSIONS=$(echo "$response" | grep -v "HTTP_STATUS" | jq -r '.[] | @base64')

    for VERSION in $VERSIONS; do
      DECODED_VERSION=$(decode_base64 $VERSION)
      
      VERSION_NAME=$(echo $DECODED_VERSION | jq -r '.name')
      LAST_MODIFIED=$(echo $DECODED_VERSION | jq -r '.lastModified')
      CREATED=$(echo $DECODED_VERSION | jq -r '.created')
      CREATED_BY=$(echo $DECODED_VERSION | jq -r '.createdBy')
      
      # Fetch version details to get the size
      VERSION_ID=$(echo $DECODED_VERSION | jq -r '.id')
      VERSION_SIZE_URL="$UDEPLOY_URL/rest/deploy/version/$VERSION_ID/artifacts"
      VERSION_SIZE_RESPONSE=$(curl -u $UDEPLOY_USER:$UDEPLOY_PASSWORD -X GET "$VERSION_SIZE_URL" -w "\nHTTP_STATUS:%{http_code}" -s)
      
      VERSION_SIZE_HTTP_STATUS=$(echo "$VERSION_SIZE_RESPONSE" | grep "HTTP_STATUS" | awk -F: '{print $2}')
      if [ "$VERSION_SIZE_HTTP_STATUS" -eq 200 ]; then
        VERSION_SIZE=$(echo "$VERSION_SIZE_RESPONSE" | grep -v "HTTP_STATUS" | jq -r '.[] | .size' | awk '{s+=$1} END {print s}')
      else
        VERSION_SIZE=0
      fi
      
      HUMAN_READABLE_SIZE=$(convert_size $VERSION_SIZE)
      
      # Fetch team details
      TEAMS_URL="$UDEPLOY_URL/rest/deploy/version/$VERSION_ID/teams"
      TEAMS_RESPONSE=$(curl -u $UDEPLOY_USER:$UDEPLOY_PASSWORD -X GET "$TEAMS_URL" -w "\nHTTP_STATUS:%{http_code}" -s)
      TEAMS_HTTP_STATUS=$(echo "$TEAMS_RESPONSE" | grep "HTTP_STATUS" | awk -F: '{print $2}')
      if [ "$TEAMS_HTTP_STATUS" -eq 200 ]; then
        TEAMS=$(echo "$TEAMS_RESPONSE" | grep -v "HTTP_STATUS" | jq -r '.[].name' | paste -sd "," -)
      else
        TEAMS="None"
      fi
      
      # Write component version details to CSV file
      printf "%s,%s,%s,%s,%s,%s,%s\n" "$COMPONENT_NAME" "$VERSION_NAME" "$HUMAN_READABLE_SIZE" "$CREATED" "$CREATED_BY" "$TEAMS" "$LAST_MODIFIED" >> $OUTPUT_FILE
    done
  else
    echo "API call failed with status code: $http_status. Check your uDeploy URL, credentials, and component name."
  fi
}

# Read component list from parameter
IFS=',' read -ra COMPONENTS <<< "$COMPONENT_NAMES"
for COMPONENT in "${COMPONENTS[@]}"; do
  list_component_details $COMPONENT
done

echo "Reports saved in the output directory."
