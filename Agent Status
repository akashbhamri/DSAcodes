Here are five precise questions to send to your vendor:

1. When httpclient.autoBlock is disabled, how long will a connector thread wait for a remote response before it times out and is released?
 


2. After a read/socket timeout elapses, does Nexus immediately free the thread, or will it retry (opening a new socket) up to the configured retry count before releasing it?
 


3. Are idle HTTP connections evicted from the pool after a configured “idle timeout,” and if so, what is the default idle timeout and how frequently does Nexus check for and remove idle connections?
 


4. **What are the current global and per-proxy configuration values for:

Connection/Socket Timeout

Request (read) Timeout

Retry Attempts**
 



5. With auto-block disabled, is there any additional mechanism (beyond the standard timeouts and retries) that will kill or unblock long-running requests, or will threads simply remain tied up until the timeout elapses?
 






Here are five key questions to ask your vendor after enabling httpclient.autoBlock:

1. What are the effective read-timeout, retry-attempt, and health-check interval settings that will govern when a proxy is auto-blocked and subsequently re-checked?
 


2. Once a proxy is marked “auto-blocked,” how long until the first health-check occurs, and what sequence of retry intervals (e.g., Fibonacci backoff up to 60 min) will Nexus use to probe for recovery?
 


3. As soon as the remote becomes available again, what is the maximum delay before Nexus unblocks the proxy and resumes traffic through it?



4. With auto-block enabled, will connector threads be released immediately by returning an error when a proxy is blocked, or can threads still remain tied up until the health-check completes?
 


5. How will a blocked proxy impact group-repository behavior—will requests fail fast over to other members, or could failures cascade and slow down group resolution?
 



