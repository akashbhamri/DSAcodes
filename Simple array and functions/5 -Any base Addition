Example
Sample Input

8
777
1

Sample Output
1000

import java.util.*;
  
  public class Main{
  
  public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      int a1 = sc.nextInt();
      int b1 = sc.nextInt();
    int d = getSum(n, a1, b1);
      System.out.println(d);
  }   
public static int getSum(int n,int a1,int b1)
{
    int carry = 0;
    int sum = 0;
    int actualvalue = 0;
    int actualvalue2 = 0;
    int mul = 1;
    while(a1>0||b1>0||carry>0)
    {
        int d1 = a1%10;
        int d2 = b1%10;
    
         sum = d1+d2+carry;
        
            actualvalue = sum%n;
            carry = sum/n;
        actualvalue2  +=actualvalue*mul; 
         mul *=10;
         a1 /=10;
        b1 /=10;
    }
return actualvalue2;
}
}
Analysis
TIME COMPLEXITY :

For finding time complexity always try to look for loops (for loops, or while loops) and find the iterations. 
Here we can see the while loop will run as long as n1, n2, or c is non-zero. And in each iteration what operation are we performing? Division. 
Hence it might be logarithmic. Clearly, the loop will run at least the number of digits of the maximum number. Why maximum? Because we always look 
for the upper bound. There might be one extra for the carry.


If n is a number then what is the length ( number of digits ) in that number? (log10 n)


If you are not aware of why this is the case, please revisit the article Digits of a number.


So, we can say the Big-O for this problem will be (log10(max(n1, n2) + 1), but we can ignore the 1 since it"s a constant. O(log10(max(n1, n2) + 1)


SPACE COMPLEXITY :

We are not using any auxiliary space at all, hence it"sO(1). Constant Space.
  
  
  
  
