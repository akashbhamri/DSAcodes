stage('Fetch Server Data') {
    steps {
        script {
            def serverIPs = params.SERVER_IPs.split(',')
            serverIPs.each { serverIP ->
                try {
                    echo "Fetching data from ${serverIP}..."
                    def result = sh(
                        script: """
                            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${params.USERNAME}@${serverIP} bash -s << 'EOF'
                            HOSTNAME=\$(hostname)
                            
                            # Determine environment
                            if [[ "\$HOSTNAME" =~ ^pp* ]]; then
                                ENVIRONMENT="Production"
                            elif [[ "\$HOSTNAME" =~ ^dr* ]]; then
                                ENVIRONMENT="Disaster Recovery"
                            elif [[ "\$HOSTNAME" =~ ^vd* ]]; then
                                ENVIRONMENT="Development"
                            else
                                ENVIRONMENT="Unknown"
                            fi
                            
                            # Disk usage with fallback for missing mount points
                            APPBIN=\$(df -h /appbin 2>/dev/null | awk 'NR==2 {gsub("%",""); print \$5}' || echo 0)
                            APPDATA=\$(df -h /appdata 2>/dev/null | awk 'NR==2 {gsub("%",""); print \$5}' || echo 0)
                            TMP=\$(df -h /tmp 2>/dev/null | awk 'NR==2 {gsub("%",""); print \$5}' || echo 0)
                            ROOT=\$(df -h / 2>/dev/null | awk 'NR==2 {gsub("%",""); print \$5}' || echo 0)
                            
                            echo "\$HOSTNAME,\$ENVIRONMENT,\$APPBIN,\$APPDATA,\$TMP,\$ROOT"
                            EOF
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Raw Output from ${serverIP}: ${result}"
                    
                    def resultArray = result.split(',').collect { it.trim() }
                    if (resultArray.size() < 6) {
                        error "Unexpected output format: ${result}"
                    }
                    def (hostname, environment, appbin, appdata, tmp, root) = resultArray

                    // Convert to integers for comparison
                    def appbinInt = appbin?.isInteger() ? appbin.toInteger() : 0
                    def appdataInt = appdata?.isInteger() ? appdata.toInteger() : 0
                    def tmpInt = tmp?.isInteger() ? tmp.toInteger() : 0
                    def rootInt = root?.isInteger() ? root.toInteger() : 0

                    echo "Parsed values: Hostname=${hostname}, Environment=${environment}, Appbin=${appbinInt}%, Appdata=${appdataInt}%, Tmp=${tmpInt}%, Root=${rootInt}%"

                    // Check thresholds
                    if ([appbinInt, appdataInt, tmpInt, rootInt].any { it >= env.ALERT_THRESHOLD }) {
                        echo "High utilization detected on ${hostname}"
                        appendToFile(env.EMAIL_BODY, """
                            <tr style='background-color: #ffcccc;'>
                                <td style='border: 1px solid black; padding: 8px;'>${hostname}</td>
                                <td style='border: 1px solid black; padding: 8px;'>${environment}</td>
                                <td style='border: 1px solid black; padding: 8px;'>${appbinInt}%</td>
                                <td style='border: 1px solid black; padding: 8px;'>${appdataInt}%</td>
                                <td style='border: 1px solid black; padding: 8px;'>${tmpInt}%</td>
                                <td style='border: 1px solid black; padding: 8px;'>${rootInt}%</td>
                            </tr>
                        """)
                    }
                } catch (Exception e) {
                    echo "Failed to fetch data from ${serverIP}: ${e.message}"
                }
            }
        }
    }
}
