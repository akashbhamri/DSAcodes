pipeline {
    agent any
    parameters {
        string(name: 'SERVER_IPs', description: 'Comma-separated list of server IPs')
        string(name: 'USERNAME', description: 'Username for SSH')
    }
    environment {
        OUTPUT_FILE = "${WORKSPACE}/Capacity_Planning_Sheet.csv"
        EMAIL_BODY = "${WORKSPACE}/email_body.html"
        ALERT_THRESHOLD = 75 // Disk utilization threshold
    }
    stages {
        stage('Initialize Email Body') {
            steps {
                script {
                    writeFile file: "${env.EMAIL_BODY}", text: """
                        <html><body>
                        <p>Hello Team,</p>
                        <p>Below is the list of servers with utilization above ${env.ALERT_THRESHOLD}%:</p>
                        <table style='border-collapse: collapse; width: 100%;'>
                        <tr>
                            <th style='border: 1px solid black; padding: 8px;'>Server Name</th>
                            <th style='border: 1px solid black; padding: 8px;'>Environment</th>
                            <th style='border: 1px solid black; padding: 8px;'>Appbin (%)</th>
                            <th style='border: 1px solid black; padding: 8px;'>Appdata (%)</th>
                            <th style='border: 1px solid black; padding: 8px;'>Tmp (%)</th>
                            <th style='border: 1px solid black; padding: 8px;'>Root (%)</th>
                        </tr>
                    """
                }
            }
        }
        stage('Fetch Server Data') {
            steps {
                script {
                    def serverIPs = params.SERVER_IPs.split(',')
                    serverIPs.each { serverIP ->
                        try {
                            echo "Fetching data from ${serverIP}..."
                            def result = sh(
                                script: """
                                    ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${params.USERNAME}@${serverIP} bash -s << 'EOF'
                                    HOSTNAME=\$(hostname)
                                    
                                    if [[ "\$HOSTNAME" =~ ^pp* ]]; then
                                        ENVIRONMENT="Production"
                                    elif [[ "\$HOSTNAME" =~ ^dr* ]]; then
                                        ENVIRONMENT="Disaster Recovery"
                                    elif [[ "\$HOSTNAME" =~ ^vd* ]]; then
                                        ENVIRONMENT="Development"
                                    else
                                        ENVIRONMENT="Unknown"
                                    fi
                                    
                                    APPBIN=\$(/bin/df -h /appbin 2>/dev/null | /bin/awk 'NR==2 {gsub("%",""); print \$5}')
                                    APPDATA=\$(/bin/df -h /appdata 2>/dev/null | /bin/awk 'NR==2 {gsub("%",""); print \$5}')
                                    TMP=\$(/bin/df -h /tmp 2>/dev/null | /bin/awk 'NR==2 {gsub("%",""); print \$5}')
                                    ROOT=\$(/bin/df -h / 2>/dev/null | /bin/awk 'NR==2 {gsub("%",""); print \$5}')
                                    
                                    echo "\$HOSTNAME,\$ENVIRONMENT,\$APPBIN,\$APPDATA,\$TMP,\$ROOT"
                                    EOF
                                """,
                                returnStdout: true
                            ).trim()

                            def (hostname, environment, appbin, appdata, tmp, root) = result.split(',')
                            echo "Received data: ${hostname}, ${environment}, ${appbin}, ${appdata}, ${tmp}, ${root}"

                            // Append to email body if utilization is above the threshold
                            if ([appbin, appdata, tmp, root].any { it.toInteger() >= env.ALERT_THRESHOLD }) {
                                def rowColor = "background-color: #ffcccc;"
                                appendToFile(env.EMAIL_BODY, """
                                    <tr style='${rowColor}'>
                                        <td style='border: 1px solid black; padding: 8px;'>${hostname}</td>
                                        <td style='border: 1px solid black; padding: 8px;'>${environment}</td>
                                        <td style='border: 1px solid black; padding: 8px;'>${appbin}%</td>
                                        <td style='border: 1px solid black; padding: 8px;'>${appdata}%</td>
                                        <td style='border: 1px solid black; padding: 8px;'>${tmp}%</td>
                                        <td style='border: 1px solid black; padding: 8px;'>${root}%</td>
                                    </tr>
                                """)
                            }
                        } catch (Exception e) {
                            echo "Failed to fetch data from ${serverIP}: ${e.message}"
                        }
                    }
                }
            }
        }
        stage('Finalize Email Content') {
            steps {
                script {
                    appendToFile(env.EMAIL_BODY, """
                        </table>
                        <p>Regards,<br>DevOps Team</p>
                        </body></html>
                    """)
                }
            }
        }
        stage('Send Email') {
            steps {
                emailext(
                    subject: "High Utilization Alert",
                    body: readFile(env.EMAIL_BODY),
                    mimeType: 'text/html',
                    to: 'team@example.com'
                )
            }
        }
    }
}

def appendToFile(filePath, content) {
    writeFile file: filePath, text: readFile(filePath) + content
}
